function coregistered_image_array =...
                    generate_roi_coregistration_array(image_array,...
                    ref_identifier, shift_identifiers, depth_shift_array,...
                    translation_shift_array)
    
    %Apply calculated shifts to all channels.
    
    im_dims = 1:2;
    coregistered_image_array = containers.Map;
    ref_images = image_array(ref_identifier);
    [~, dim_identifiers, ~, ~] = determine_dimensions(ref_identifier);
    num_shift_identifiers = length(shift_identifiers);
    if isempty(dim_identifiers) || ~contains(cell2mat(dim_identifiers), 'z')
        for i = 1:num_shift_identifiers
            shift_identifier = shift_identifiers{i};
            shift = translation_shift_array(shift_identifier);
            shift_images = image_array(shift_identifier);
            shift_images_alldims = shift_images(:, :, :);
            num_imgs = size(shift_images_alldims, 3);
            shift_images_alldims_shifted =...
                                        zeros(size(shift_images_alldims));
            for j = 1:num_imgs
                img = shift_images_alldims(:, :, j);
                img_shifted = imtranslate(img, shift);
                shift_images_alldims_shifted(:, :, j) = img_shifted;
            end
            shift_images_alldims_shifted_reshaped =...
                reshape(shift_images_alldims_shifted, size(shift_images));
            coregistered_image_array(shift_identifier) =...
                            shift_images_alldims_shifted_reshaped;
        end
        coregistered_image_array(ref_identifier) = ref_images;
    elseif contains(cell2mat(dim_identifiers), 'z')
        depth_dim = 5;
        depth_dim_after_coreg = 3;
        num_array_dims = length(size(ref_images));
        non_imdims_dim_idx_array = 3:num_array_dims;
        permute_dimensions_array = [im_dims, depth_dim,...
                    non_imdims_dim_idx_array(non_imdims_dim_idx_array...
                                                            ~= depth_dim)];
        ref_images_permuted = permute(ref_images,...
                                            permute_dimensions_array);
        ref_images_permutation_dims = size(ref_images_permuted);
        keep_ref_permutation_dims = ref_images_permutation_dims(4:end);
        ref_images_permuted_depths = ref_images_permuted(:, :, :, :);
        depth_shift_array_aggregated = zeros(1, num_shift_identifiers);
        for i = 1:num_shift_identifiers
            shift_identifier = shift_identifiers{i};
            temp_depth_shift = depth_shift_array(shift_identifier);
            depth_shift_array_aggregated(i) = temp_depth_shift;
        end
        [max_shift, ~] = max(depth_shift_array_aggregated);
        [min_shift, ~] = min(depth_shift_array_aggregated);
        for i = 1:num_shift_identifiers
            shift_identifier = shift_identifiers{i};
            identifier_depth_shift = depth_shift_array(shift_identifier);
            identifier_translation_shift =...
                                translation_shift_array(shift_identifier);
            shift_images = image_array(shift_identifier);
            shift_images_permuted = permute(shift_images,...
                                                permute_dimensions_array);
            shift_images_permutation_dims = size(shift_images_permuted);
            keep_shift_permutation_dims =...
                                    shift_images_permutation_dims(4:end);
            shift_images_permuted_condensed = shift_images_permuted(:,...
                                                                :, :, :);
            if max_shift >= 0 && min_shift < 0 &&...
                                            identifier_depth_shift >= 0
                shift_images_depth_shifted =...
                    shift_images_permuted_condensed(:, :,...
                    (1 + (max_shift - identifier_depth_shift)):(end -...
                    (identifier_depth_shift - min_shift)), :);
                temp_translation_shift_array =...
                    identifier_translation_shift((1 + (max_shift -...
                    identifier_depth_shift)):(end + min_shift), :);
            elseif max_shift > 0 && min_shift < 0 &&...
                                            identifier_depth_shift <= 0
                shift_images_depth_shifted =...
                    shift_images_permuted_condensed(:, :,...
                    (1 + (max_shift - identifier_depth_shift)):...
                    (end + (min_shift - identifier_depth_shift)), :);
                temp_translation_shift_array =...
                    identifier_translation_shift((1 + max_shift):(end +...
                    (min_shift - identifier_depth_shift)), :);
            elseif max_shift >= 0 && min_shift >=0
                shift_images_depth_shifted =...
                    shift_images_permuted_condensed(:, :,...
                    (1 + (max_shift - identifier_depth_shift)):...
                    (end - identifier_depth_shift), :);
                temp_translation_shift_array =...
                    identifier_translation_shift((1 + (max_shift -...
                    identifier_depth_shift)):end, :);
            elseif max_shift <= 0 && min_shift <=0
                shift_images_depth_shifted =...
                    shift_images_permuted_condensed(:, :,...
                    (1 - identifier_depth_shift):...
                    (end + (min_shift - identifier_depth_shift)), :);
                temp_translation_shift_array =...
                    identifier_translation_shift(1:(end + (min_shift -...
                    identifier_depth_shift)), :);
            end
            num_depths = size(temp_translation_shift_array, 1);
            shift_images_coregistered =...
                                zeros(size(shift_images_depth_shifted));
            for j = 1:num_depths
                shift_depth_images = shift_images_depth_shifted(:, :, j, :);
                depth_translation = temp_translation_shift_array(j, :);
                num_images = size(shift_depth_images, 4);
                for k = 1:num_images
                    img = shift_depth_images(:, :, :, k);
                    img_translated = imtranslate(img, depth_translation);
                    shift_images_coregistered(:, :, j, k) = img_translated;
                end
            end
            coregistration_dims = size(shift_images_coregistered);
            keep_coregistration_dims = coregistration_dims(1:3);
            shift_images_coregistered_dims = [keep_coregistration_dims,...
                                            keep_shift_permutation_dims];
            shift_images_coregistered_reshaped =...
                        reshape(shift_images_coregistered,...
                                        shift_images_coregistered_dims);

            permute_coregistered_dimensions_array = [im_dims,...
                    non_imdims_dim_idx_array(non_imdims_dim_idx_array...
                    ~= depth_dim_after_coreg), depth_dim_after_coreg];
            shift_images_coregistered_permuted_reshaped =...
                permute(shift_images_coregistered_reshaped,...
                                    permute_coregistered_dimensions_array);
            coregistered_image_array(shift_identifier) =...
                                shift_images_coregistered_permuted_reshaped;
        end
        if max_shift >= 0 && min_shift >= 0
            ref_images_permuted_depths_shifted =...
                 ref_images_permuted_depths(:, :, (1 + max_shift):end, :);
        elseif max_shift <= 0 && min_shift <= 0
            ref_images_permuted_depths_shifted =...
                 ref_images_permuted_depths(:, :, 1:(end + min_shift), :);
        else
            ref_images_permuted_depths_shifted =...
                 ref_images_permuted_depths(:, :,...
                                (1 + max_shift):(end - abs(min_shift)), :);
        end
        coregistration_dims = size(ref_images_permuted_depths_shifted);
        keep_coregistration_dims = coregistration_dims(1:3);
        ref_images_coregistered_dims = [keep_coregistration_dims,...
                                            keep_ref_permutation_dims];
        ref_images_coregistered_reshaped =...
                    reshape(ref_images_permuted_depths_shifted,...
                                    ref_images_coregistered_dims);
        
        permute_coregistered_dimensions_array = [im_dims,...
                non_imdims_dim_idx_array(non_imdims_dim_idx_array...
                ~= depth_dim_after_coreg), depth_dim_after_coreg];
        ref_images_coregistered_permuted_reshaped =...
            permute(ref_images_coregistered_reshaped,...
                                permute_coregistered_dimensions_array);
        coregistered_image_array(ref_identifier) =...
                                ref_images_coregistered_permuted_reshaped;
%         disp('sheesh')
    end
end